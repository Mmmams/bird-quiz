{"version":3,"sources":["redux/user/user.types.js","redux/user/user.actions.js","redux/user/user.selector.js","components/header/header.component.jsx","assets/true.mp3","assets/wrong.mp3","redux/birds/birds.types.js","redux/birds/birds.action.js","redux/birds/birds.selector.js","components/list/list.component.jsx","components/information/information.component.jsx","components/main/main.component.jsx","components/qustion/question.component.jsx","utils.js","components/custom-button/custom-button.component.jsx","components/endgame/endgame.component.jsx","components/login/login.jsx","App.jsx","reportWebVitals.js","redux/birds/birds.sagas.js","redux/user/user.sagas.js","redux/root-saga.js","redux/birds/birds.reducer.js","redux/user/user.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["userActionTypes","SIGN_UP_START","SIGN_UP_SUCCESS","SIGN_UP_FAIL","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","UPDATE_LEVEL_START","UPDATE_LEVEL_SUCCESS","UPDATE_LEVEL_FAIL","GET_LEVEL_START","GET_LEVEL_SUCCESS","GET_LEVEL_FAIL","RESET_LEVEL_START","RESET_LEVEL_SUCCESS","RESET_LEVEL_FAIL","SET_MESSAGE","UPDATE_SCORE_START","UPDATE_SCORE_SUCCESS","UPDATE_SCORE_FAIL","GET_SCORE_START","GET_SCORE_SUCCESS","GET_SCORE_FAIL","RESET_SCORE_START","RESET_SCORE_SUCCESS","RESET_SCORE_FAIL","signUpFail","error","type","payload","loginStart","email","password","loginSuccess","user","loginFail","updateLevelSuccess","level","getLevelStart","getLevelSuccess","resetLevelSuccess","setMessage","message","updateScoreSuccess","score","getScoreSuccess","resetScoreSuccess","selectUser","state","selectCurrentUser","createSelector","currentUser","selectMessage","selectScore","selectLevel","useStyles","makeStyles","theme","root","margin","spacing","btn","color","Header","classes","dispatch","useDispatch","useSelector","className","Button","variant","onClick","localStorage","removeItem","birdsActionTypes","FETCH_INFO_START","FETCH_INFO_SUCCESS","FETCH_INFO_FAIL","SET_CURRENT_BIRD_ARRAY","SET_RANDOM_VALUE","SET_ACTIVE_BIRD","SET_QUESTION_BIRD","SET_ANSWERED","INCREASE_SCORE","DECREASE_EXPTRA_SCORE","RESET_EXTRA_SCORE","RESET_ACTIVE_BIRD","RESET_GAME","FILL_COLORS_ARRAY","CHANGE_LIST_COLOR","setCurrentBirdArray","currentBirdArray","setRandomValue","randomValue","setAnswered","fillColorsArray","colorsArray","changeListColor","index","selectBirds","birds","selectBirdsArray","birdsArray","selectCurrentBirdsArray","currentBirdsArray","selectExtraScore","extraScore","selectRandom","random","selectAnswered","answered","selectActiveBird","activeBird","selectQuestionBird","questionBird","selectColorsArray","BirdsList","rightAnswerAudio","Audio","right","wrongAnswerAudio","wrong","currentArray","handleChooseList","event","bird","play","updateScoreStart","map","width","height","cx","cy","r","stroke","strokeWidth","fill","name","_id","BirdInfo","alt","src","image","species","description","controls","audio","Main","Question","currentAudio","useRef","current","pause","useEffect","ref","getRandomValue","max","Math","floor","initialArray","slice","fillColorsArrayFucntion","i","length","push","CustomButton","handleButton","setItem","JSON","stringify","EndGame","handleEndGame","resetScoreStart","paper","marginTop","display","flexDirection","alignItems","avatar","backgroundColor","form","submit","createMuiTheme","palette","primary","main","secondary","Login","useState","setForm","handleChanges","preventDefault","target","value","handleSignUp","a","handleLogin","test","ThemeProvider","Container","component","maxWidth","CssBaseline","Avatar","Typography","noValidate","TextField","required","fullWidth","id","label","autoComplete","autoFocus","onChange","Alert","severity","Grid","container","justify","item","App","initialBirdsArray","parse","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","birdsSagas","onFetchInfoStart","fetchingInfo","all","call","takeLatest","axios","get","response","put","birdInfo","data","userSaga","onResetScoreStart","onGetScoreStart","getScoreStart","onUpdateScoreStart","onResetLevelStart","resetLevelStart","onGetLevelStart","onUpdateLevelStart","updateLevelStart","onLoginStart","onSignUpStart","signUpStart","fetch","method","credentials","body","headers","json","currentScore","currentLevel","console","log","res","success","rootSaga","INITIAL_STATE","birdReducer","action","userReducer","messgae","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3f7cc99.chunk.js","sourcesContent":["const userActionTypes = {\n  SIGN_UP_START: \"SIGN_UP_START\",\n  SIGN_UP_SUCCESS: \"SIGN_UP_SUCCESS\",\n  SIGN_UP_FAIL: \"SIGN_UP_FAIL\",\n  LOGIN_START: \"LOGIN_START\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  LOGIN_FAIL: \"LOGIN_FAIL\",\n  LOGOUT: \"LOGOUT\",\n  UPDATE_LEVEL_START: \"UPDATE_LEVEL_START\",\n  UPDATE_LEVEL_SUCCESS: \"UPDATE_LEVEL_SUCCESS\",\n  UPDATE_LEVEL_FAIL: \"UPDATE_LEVEL_FAIL\",\n  GET_LEVEL_START: \"GET_LEVEL_START\",\n  GET_LEVEL_SUCCESS: \"GET_LEVEL_SUCCESS\",\n  GET_LEVEL_FAIL: \"GET_LEVEL_FAIL\",\n  RESET_LEVEL_START: \"RESET_LEVEL_START\",\n  RESET_LEVEL_SUCCESS: \"RESET_LEVEL_SUCCESS\",\n  RESET_LEVEL_FAIL: \"RESET_LEVEL_FAIL\",\n  SET_MESSAGE: \"SET_MESSAGE\",\n  UPDATE_SCORE_START: \"UPDATE_SCORE_START\",\n  UPDATE_SCORE_SUCCESS: \"UPDATE_SCORE_SUCCESS\",\n  UPDATE_SCORE_FAIL: \"UPDATE_SCORE_FAIL\",\n  GET_SCORE_START: \"GET_SCORE_START\",\n  GET_SCORE_SUCCESS: \"GET_SCORE_SUCCESS\",\n  GET_SCORE_FAIL: \"GET_SCORE_FAIL\",\n  RESET_SCORE_START: \"RESET_SCORE_START\",\n  RESET_SCORE_SUCCESS: \"RESET_SCORE_SUCCESS\",\n  RESET_SCORE_FAIL: \"RESET_SCORE_FAIL\",\n};\n\nexport default userActionTypes;\n","import userActionTypes from \"./user.types\";\n\nexport const signUpSuccess = (user) => ({\n  type: userActionTypes.SIGN_UP_SUCCESS,\n  payload: user,\n});\n\nexport const signUpFail = (error) => ({\n  type: userActionTypes.SIGN_UP_FAIL,\n  payload: error,\n});\n\nexport const signUpStart = (email, password) => ({\n  type: userActionTypes.SIGN_UP_START,\n  payload: { email, password },\n});\n\nexport const loginStart = (email, password) => ({\n  type: userActionTypes.LOGIN_START,\n  payload: { email, password },\n});\n\nexport const loginSuccess = (user) => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user,\n});\n\nexport const loginFail = (error) => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: error,\n});\n\nexport const updateLevelStart = (email) => ({\n  type: userActionTypes.UPDATE_LEVEL_START,\n  payload: email,\n});\n\nexport const updateLevelSuccess = (level) => ({\n  type: userActionTypes.UPDATE_LEVEL_SUCCESS,\n  payload: level,\n});\n\nexport const updateLevelFail = (error) => ({\n  type: userActionTypes.UPDATE_LEVEL_FAIL,\n  payload: error,\n});\n\nexport const getLevelStart = (email) => ({\n  type: userActionTypes.GET_LEVEL_START,\n  payload: email,\n});\n\nexport const getLevelSuccess = (level) => ({\n  type: userActionTypes.GET_LEVEL_SUCCESS,\n  payload: level,\n});\n\nexport const getLevelFail = (error) => ({\n  type: userActionTypes.GET_LEVEL_FAIL,\n  payload: error,\n});\n\nexport const resetLevelStart = (email) => ({\n  type: userActionTypes.RESET_LEVEL_START,\n  payload: email,\n});\n\nexport const resetLevelSuccess = (level) => ({\n  type: userActionTypes.RESET_LEVEL_SUCCESS,\n  payload: level,\n});\n\nexport const resetLevelFail = (error) => ({\n  type: userActionTypes.RESET_LEVEL_FAIL,\n  payload: error,\n});\n\nexport const setMessage = (message) => ({\n  type: userActionTypes.SET_MESSAGE,\n  payload: message,\n});\n\nexport const updateScoreStart = (email, extraScore) => ({\n  type: userActionTypes.UPDATE_SCORE_START,\n  payload: { email, extraScore },\n});\n\nexport const updateScoreSuccess = (score) => ({\n  type: userActionTypes.UPDATE_SCORE_SUCCESS,\n  payload: score,\n});\n\nexport const updateScoreFail = (error) => ({\n  type: userActionTypes.UPDATE_SCORE_FAIL,\n  payload: error,\n});\n\nexport const getScoreStart = (email) => ({\n  type: userActionTypes.GET_SCORE_START,\n  payload: email,\n});\n\nexport const getScoreSuccess = (score) => ({\n  type: userActionTypes.GET_SCORE_SUCCESS,\n  payload: score,\n});\n\nexport const getScoreFail = (error) => ({\n  type: userActionTypes.GET_SCORE_FAIL,\n  payload: error,\n});\n\nexport const resetScoreStart = (email) => ({\n  type: userActionTypes.RESET_SCORE_START,\n  payload: email,\n});\n\nexport const resetScoreSuccess = (score) => ({\n  type: userActionTypes.RESET_SCORE_SUCCESS,\n  payload: score,\n});\n\nexport const resetScoreFail = (error) => ({\n  type: userActionTypes.RESET_SCORE_FAIL,\n  payload: error,\n});\n","import { createSelector } from \"reselect\";\n\nconst selectUser = (state) => state.user;\n\nexport const selectCurrentUser = createSelector(\n  [selectUser],\n  (user) => user.currentUser\n);\n\nexport const selectMessage = createSelector(\n  [selectUser],\n  (user) => user.message\n);\n\nexport const selectScore = createSelector([selectUser], (user) => user.score);\n\nexport const selectLevel = createSelector([selectUser], (user) => user.level);\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nimport \"./header.styles.scss\";\n\nimport { loginSuccess } from \"../../redux/user/user.actions\";\n\nimport {\n  selectCurrentUser,\n  selectLevel,\n  selectScore,\n} from \"../../redux/user/user.selector\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  btn: {\n    margin: \"10px\",\n    color: \"white\",\n  },\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const user = useSelector(selectCurrentUser);\n  const level = useSelector(selectLevel);\n  const score = useSelector(selectScore);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"user\");\n    dispatch(loginSuccess(null));\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"header-info\">\n        <div className=\"header-logo\">\n          Song<span className=\"logo-part\">Bird</span>\n        </div>\n        <div className=\"header-userinfo\">\n          <div className=\"score\">\n            {user.email}: {score}\n          </div>\n          <Button\n            variant=\"outlined\"\n            className={classes.btn}\n            onClick={handleLogout}\n          >\n            Выйти\n          </Button>\n        </div>\n      </div>\n      <ul className=\"header-list\">\n        <li className={`${level === 1 ? \"currentLevel\" : \"\"}  list`}>\n          Разминка\n        </li>\n        <li className={`${level === 2 ? \"currentLevel\" : \"\"}  list`}>\n          Воробьиные\n        </li>\n        <li className={`${level === 3 ? \"currentLevel\" : \"\"}  list`}>\n          Лесные птицы\n        </li>\n        <li className={`${level === 4 ? \"currentLevel\" : \"\"}  list`}>\n          Певчие птицы\n        </li>\n        <li className={`${level === 5 ? \"currentLevel\" : \"\"}  list`}>\n          Хищные птицы\n        </li>\n        <li className={`${level === 6 ? \"currentLevel\" : \"\"}  list`}>\n          Морские птицы\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/true.878a455e.mp3\";","export default __webpack_public_path__ + \"static/media/wrong.31792b99.mp3\";","const birdsActionTypes = {\n  FETCH_INFO_START: \"FETCH_INFO_START\",\n  FETCH_INFO_SUCCESS: \"FETCH_INFO_SUCCESS\",\n  FETCH_INFO_FAIL: \"FETCH_INFO_FAIL\",\n  SET_CURRENT_BIRD_ARRAY: \"SET_CURRENT_BIRD_ARRAY\",\n  SET_RANDOM_VALUE: \"SET_RANDOM_VALUE\",\n  SET_ACTIVE_BIRD: \"SET_ACTIVE_BIRD\",\n  SET_QUESTION_BIRD: \"SET_QUESTION_BIRD\",\n  SET_ANSWERED: \"SET_ANSWERED\",\n  INCREASE_SCORE: \"INCREASE_SCORE\",\n  DECREASE_EXPTRA_SCORE: \"DECREASE_EXPTRA_SCORE\",\n  RESET_EXTRA_SCORE: \"RESET_EXTRA_SCORE\",\n  RESET_ACTIVE_BIRD: \"RESET_ACTIVE_BIRD\",\n  RESET_GAME: \"RESET_GAME\",\n  FILL_COLORS_ARRAY: \"FILL_COLORS_ARRAY\",\n  CHANGE_LIST_COLOR: \"CHANGE_LIST_COLOR\",\n};\n\nexport default birdsActionTypes;\n","import birdsActionTypes from \"./birds.types\";\n\nexport const fetchInfoStart = () => ({\n  type: birdsActionTypes.FETCH_INFO_START,\n});\n\nexport const fetchInfoSuccess = (birdInfo) => ({\n  type: birdsActionTypes.FETCH_INFO_SUCCESS,\n  payload: birdInfo,\n});\n\nexport const fetchInfoFail = (error) => ({\n  type: birdsActionTypes.FETCH_INFO_FAIL,\n  payload: error,\n});\n\nexport const setCurrentBirdArray = (currentBirdArray) => ({\n  type: birdsActionTypes.SET_CURRENT_BIRD_ARRAY,\n  payload: currentBirdArray,\n});\n\nexport const setRandomValue = (randomValue) => ({\n  type: birdsActionTypes.SET_RANDOM_VALUE,\n  payload: randomValue,\n});\n\nexport const setActiveBird = (bird) => ({\n  type: birdsActionTypes.SET_ACTIVE_BIRD,\n  payload: bird,\n});\n\nexport const setQuestionBird = (bird) => ({\n  type: birdsActionTypes.SET_QUESTION_BIRD,\n  payload: bird,\n});\n\nexport const setAnswered = () => ({\n  type: birdsActionTypes.SET_ANSWERED,\n});\n\nexport const decreaseExtraScore = () => ({\n  type: birdsActionTypes.DECREASE_EXPTRA_SCORE,\n});\n\nexport const resetExtraScore = () => ({\n  type: birdsActionTypes.RESET_EXTRA_SCORE,\n});\n\nexport const resetActiveBird = () => ({\n  type: birdsActionTypes.RESET_ACTIVE_BIRD,\n});\n\nexport const resetGame = () => ({\n  type: birdsActionTypes.RESET_GAME,\n});\n\nexport const fillColorsArray = (colorsArray) => ({\n  type: birdsActionTypes.FILL_COLORS_ARRAY,\n  payload: colorsArray,\n});\n\nexport const changeListColor = (color, index) => ({\n  type: birdsActionTypes.CHANGE_LIST_COLOR,\n  payload: { color, index },\n});\n","import { createSelector } from \"reselect\";\n\nconst selectBirds = (state) => state.birds;\n\nexport const selectBirdsArray = createSelector(\n  [selectBirds],\n  (birds) => birds.birdsArray\n);\n\nexport const selectCurrentBirdsArray = createSelector(\n  [selectBirds],\n  (birds) => birds.currentBirdsArray\n);\n\nexport const selectScore = createSelector(\n  [selectBirds],\n  (birds) => birds.score\n);\n\nexport const selectExtraScore = createSelector(\n  [selectBirds],\n  (birds) => birds.extraScore\n);\n\nexport const selectRandom = createSelector(\n  [selectBirds],\n  (birds) => birds.random\n);\n\nexport const selectAnswered = createSelector(\n  [selectBirds],\n  (birds) => birds.answered\n);\n\nexport const selectActiveBird = createSelector(\n  [selectBirds],\n  (birds) => birds.activeBird\n);\n\nexport const selectQuestionBird = createSelector(\n  [selectBirds],\n  (birds) => birds.questionBird\n);\n\nexport const selectColorsArray = createSelector(\n  [selectBirds],\n  (birds) => birds.colorsArray\n);\n","import \"./list.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport right from \"../../assets/true.mp3\";\nimport wrong from \"../../assets/wrong.mp3\";\n\nimport { updateScoreStart } from \"../../redux/user/user.actions.js\";\nimport { selectCurrentUser } from \"../../redux/user/user.selector\";\n\nimport {\n  setActiveBird,\n  setAnswered,\n  decreaseExtraScore,\n  changeListColor,\n} from \"../../redux/birds/birds.action\";\n\nimport {\n  selectCurrentBirdsArray,\n  selectAnswered,\n  selectRandom,\n  selectExtraScore,\n  selectColorsArray,\n} from \"../../redux/birds/birds.selector\";\n\nconst BirdsList = () => {\n  const dispatch = useDispatch();\n\n  const rightAnswerAudio = new Audio(right);\n  const wrongAnswerAudio = new Audio(wrong);\n\n  const currentUser = useSelector(selectCurrentUser);\n\n  const colorsArray = useSelector(selectColorsArray);\n  const random = useSelector(selectRandom);\n  const answered = useSelector(selectAnswered);\n  const currentArray = useSelector(selectCurrentBirdsArray);\n  const extraScore = useSelector(selectExtraScore);\n\n  const handleChooseList = (event, index) => {\n    dispatch(setActiveBird(currentArray[index]));\n    if (index === random) {\n      if (answered === false) {\n        rightAnswerAudio.play();\n        dispatch(changeListColor(\"green\", index));\n        dispatch(updateScoreStart(currentUser.email, extraScore));\n        dispatch(setAnswered());\n      }\n    } else {\n      if (answered === false && colorsArray[index] !== \"red\") {\n        wrongAnswerAudio.play();\n        dispatch(decreaseExtraScore());\n        dispatch(changeListColor(\"red\", index));\n      }\n    }\n  };\n\n  return (\n    <div className=\"bird-list-container\">\n      {currentArray ? (\n        <div>\n          <ul className=\"bird-list\">\n            {currentArray.map((bird, index) => (\n              <li\n                className=\"list\"\n                key={bird._id}\n                onClick={(event) => handleChooseList(event, index)}\n              >\n                <svg className=\"options_block\" width=\"14\" height=\"14\">\n                  <circle\n                    cx=\"7\"\n                    cy=\"7\"\n                    r=\"6\"\n                    stroke=\"black\"\n                    strokeWidth=\"1\"\n                    fill={colorsArray[index]}\n                  ></circle>\n                </svg>\n                <span>{bird.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div className=\"bird-list-container loading-title\">Загрузка...</div>\n      )}\n    </div>\n  );\n};\n\nexport default BirdsList;\n","import \"./information.styles.scss\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { selectActiveBird } from \"../../redux/birds/birds.selector\";\n\nconst BirdInfo = () => {\n  const activeBird = useSelector(selectActiveBird);\n\n  return (\n    <div className=\"container\">\n      {activeBird ? (\n        <div>\n          <div className=\"bird-info\">\n            <img className=\"bird-img\" alt=\"bird\" src={activeBird.image} />\n\n            <div className=\"title-container\">\n              <div className=\"title\">{activeBird.name}</div>\n              <div className=\"engName\">{activeBird.species}</div>\n              <div className=\"sub-title\">{activeBird.description}</div>\n            </div>\n          </div>\n          <audio controls className=\"bird-audio\" src={activeBird.audio}></audio>\n        </div>\n      ) : (\n        <div className=\"bird-info\">\n          Послушайте звук и выберите правильный ответ.\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BirdInfo;\n","import React from \"react\";\n\nimport \"./main.styles.scss\";\n\nimport BirdList from \"../list/list.component\";\nimport BirdInfo from \"../information/information.component\";\n\nconst Main = () => {\n  return (\n    <div className=\"main\">\n      <BirdList />\n      <BirdInfo />\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./qustion.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { setQuestionBird } from \"../../redux/birds/birds.action\";\n\nimport {\n  selectRandom,\n  selectQuestionBird,\n  selectAnswered,\n  selectCurrentBirdsArray,\n} from \"../../redux/birds/birds.selector\";\n\nconst Question = () => {\n  const dispatch = useDispatch();\n\n  const currentArray = useSelector(selectCurrentBirdsArray);\n  const random = useSelector(selectRandom);\n  const questionBird = useSelector(selectQuestionBird);\n  const answered = useSelector(selectAnswered);\n\n  const currentAudio = useRef(null);\n  if (answered === true) {\n    currentAudio.current.pause();\n  }\n\n  useEffect(() => {\n    if (currentArray) {\n      dispatch(setQuestionBird(currentArray[random]));\n    }\n  }, [random]);\n\n  return (\n    <div className=\"question\">\n      <div>\n        <img\n          className=\"question-image\"\n          alt=\"unknown-bird\"\n          src={\n            answered\n              ? questionBird.image\n              : \"https://image.freepik.com/free-vector/pixel-art-cartoon-bird-icon-set-8bit-autumn_41992-931.jpg\"\n          }\n        />\n      </div>\n      <div className=\"question-data\">\n        <div className=\"name\">{answered ? questionBird.name : \"******\"}</div>\n        {questionBird ? (\n          <audio\n            className=\"question-audio\"\n            controls\n            src={questionBird.audio}\n            ref={currentAudio}\n          ></audio>\n        ) : (\n          <div className=\"loading\">Загрузка...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Question;\n","export const getRandomValue = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nexport const currentBirdsArray = (level, initialArray) => {\n  const currentArray = initialArray.slice((level - 1) * 6, level * 6);\n  return currentArray;\n};\n\nexport const audioClick = (answer) => {\n  const rightAnswer = new Audio(\"./assets/true.mp3\");\n  const wrongAnswer = new Audio(\"./assets/wrong.mp3\");\n  if (answer) {\n    rightAnswer.play();\n  } else {\n    wrongAnswer.play();\n  }\n};\n\nexport const fillColorsArrayFucntion = (birdsArray) => {\n  const colorsArray = [];\n  for (let i = 0; i < birdsArray.length; i++) {\n    colorsArray.push(\"white\");\n  }\n  return colorsArray;\n};\n","import React from \"react\";\n\nimport \"./custom-button.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  currentBirdsArray,\n  getRandomValue,\n  fillColorsArrayFucntion,\n} from \"../../utils\";\n\nimport { selectCurrentUser, selectLevel } from \"../../redux/user/user.selector\";\n\nimport { updateLevelStart, setMessage } from \"../../redux/user/user.actions\";\n\nimport {\n  setAnswered,\n  setCurrentBirdArray,\n  resetActiveBird,\n  setRandomValue,\n  fillColorsArray,\n  resetExtraScore,\n} from \"../../redux/birds/birds.action\";\n\nimport {\n  selectAnswered,\n  selectBirdsArray,\n} from \"../../redux/birds/birds.selector\";\n\nconst CustomButton = () => {\n  const dispatch = useDispatch();\n\n  const user = useSelector(selectCurrentUser);\n  const answered = useSelector(selectAnswered);\n  const level = useSelector(selectLevel);\n  const initialArray = useSelector(selectBirdsArray);\n\n  const handleButton = () => {\n    if (answered === true) {\n      dispatch(setAnswered());\n      dispatch(resetActiveBird());\n      dispatch(resetExtraScore());\n      dispatch(updateLevelStart({ email: user.email }));\n      const currentArray = currentBirdsArray(level + 1, initialArray);\n      dispatch(setCurrentBirdArray(currentArray));\n      const randomValue = getRandomValue(currentArray.length);\n      dispatch(setRandomValue(randomValue));\n      const colorsArray = fillColorsArrayFucntion(currentArray);\n      dispatch(fillColorsArray(colorsArray));\n      dispatch(setMessage(null));\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className={answered ? \"custom-button\" : \"blockedBtn\"}\n        onClick={() => {\n          handleButton();\n        }}\n      >\n        Следующий уровень\n      </button>\n    </div>\n  );\n};\n\nexport default CustomButton;\n","import React from \"react\";\n\nimport \"./endgame.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getRandomValue,\n  currentBirdsArray,\n  fillColorsArrayFucntion,\n} from \"../../utils\";\n\nimport { selectCurrentUser, selectScore } from \"../../redux/user/user.selector\";\n\nimport {\n  resetLevelStart,\n  resetScoreStart,\n} from \"../../redux/user/user.actions.js\";\n\nimport {\n  resetGame,\n  setRandomValue,\n  setCurrentBirdArray,\n  fillColorsArray,\n} from \"../../redux/birds/birds.action\";\n\nimport { selectBirdsArray } from \"../../redux/birds/birds.selector\";\n\nconst EndGame = () => {\n  const dispatch = useDispatch();\n\n  const score = useSelector(selectScore);\n  const user = useSelector(selectCurrentUser);\n  const initialArray = useSelector(selectBirdsArray);\n  const maxScore = 30;\n\n  const handleEndGame = () => {\n    dispatch(resetGame());\n    const currentArray = currentBirdsArray(1, initialArray);\n    dispatch(setCurrentBirdArray(currentArray));\n\n    const colorsArray = fillColorsArrayFucntion(currentArray);\n    dispatch(fillColorsArray(colorsArray));\n\n    const randomValue = getRandomValue(currentArray.length);\n    dispatch(setRandomValue(randomValue));\n\n    dispatch(resetLevelStart(user.email));\n    dispatch(resetScoreStart(user.email));\n  };\n\n  return (\n    <div className=\"endgame-container\">\n      <div className=\"endgame-title\">Поздравляем</div>\n      <div className=\"endgame-subtitle\">\n        Игра окончена. Общий результат {score} из 30 возможных баллов.\n      </div>\n      {score === maxScore ? (\n        <div className=\"endgame-subtitle\">Поздравляем, Вы прошли игру.</div>\n      ) : (\n        <button className=\"endgame-btn\" onClick={() => handleEndGame()}>\n          Попробовать еще раз!\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default EndGame;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  signUpStart,\n  loginStart,\n  getLevelStart,\n  setMessage,\n} from \"../../redux/user/user.actions\";\n\nimport {\n  selectMessage,\n  selectCurrentUser,\n} from \"../../redux/user/user.selector\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, createMuiTheme } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: \"#64b5f6\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#64b5f6\",\n    },\n    secondary: {\n      main: \"#008cff\",\n    },\n  },\n});\n\nexport default function Login() {\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  const message = useSelector(selectMessage);\n  const user = useSelector(selectCurrentUser);\n  const [form, setForm] = useState({ email: \"\", password: \"\" });\n\n  const handleChanges = (event) => {\n    event.preventDefault();\n    setForm({ ...form, [event.target.name]: event.target.value });\n  };\n\n  const handleSignUp = async (event) => {\n    event.preventDefault();\n    dispatch(signUpStart(form.email, form.password));\n    dispatch(setMessage(null));\n  };\n\n  const validateEmail = (email) => {\n    if (\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n        email\n      )\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleLogin = async (event) => {\n    event.preventDefault();\n    const validate = validateEmail(form.email);\n    if (validate) {\n      dispatch(loginStart(form.email, form.password));\n      dispatch(getLevelStart(form.email));\n      dispatch(setMessage(null));\n    } else {\n      dispatch(setMessage(\"Неккоректный email!\"));\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              onChange={handleChanges}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={handleChanges}\n            />\n            {message ? (\n              message === \"Пользователь успешно создан!\" ? (\n                <Alert severity=\"success\">{message}</Alert>\n              ) : (\n                <Alert severity=\"error\">{message}</Alert>\n              )\n            ) : null}\n\n            <Grid container justify={\"space-between\"}>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  className={classes.submit}\n                  onClick={handleLogin}\n                >\n                  Войти\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  className={classes.submit}\n                  onClick={handleSignUp}\n                >\n                  Зарегестрироваться\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n    </ThemeProvider>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./App.css\";\n\nimport Header from \"./components/header/header.component\";\nimport Main from \"./components/main/main.component\";\nimport Question from \"./components/qustion/question.component\";\nimport CustomButton from \"./components/custom-button/custom-button.component\";\nimport EndGame from \"./components/endgame/endgame.component\";\nimport Login from \"./components/login/login\";\n\nimport {\n  currentBirdsArray,\n  getRandomValue,\n  fillColorsArrayFucntion,\n} from \"./utils.js\";\n\nimport {\n  loginSuccess,\n  getLevelStart,\n  getScoreStart,\n} from \"./redux/user/user.actions\";\n\nimport { selectCurrentUser, selectLevel } from \"./redux/user/user.selector\";\n\nimport {\n  fetchInfoStart,\n  setCurrentBirdArray,\n  setRandomValue,\n  fillColorsArray,\n} from \"./redux/birds/birds.action\";\n\nimport { selectBirdsArray } from \"./redux/birds/birds.selector\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const maxLevel = 6;\n  const currentUser = useSelector(selectCurrentUser);\n  const level = useSelector(selectLevel);\n  const initialBirdsArray = useSelector(selectBirdsArray);\n\n  useEffect(() => {\n    dispatch(fetchInfoStart());\n  }, []);\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    dispatch(loginSuccess(user));\n  }, []);\n  useEffect(() => {\n    if (currentUser) {\n      dispatch(getLevelStart(currentUser.email));\n      dispatch(getScoreStart(currentUser.email));\n    }\n  }, [currentUser]);\n\n  useEffect(() => {\n    if (currentUser && initialBirdsArray) {\n      const currentArray = currentBirdsArray(level, initialBirdsArray);\n      dispatch(setCurrentBirdArray(currentArray));\n    }\n  }, [currentUser, initialBirdsArray, level]);\n\n  useEffect(() => {\n    if (initialBirdsArray) {\n      const currentArray = currentBirdsArray(level, initialBirdsArray);\n      const randomValue = getRandomValue(currentArray.length);\n      const colorsArray = fillColorsArrayFucntion(currentArray);\n      dispatch(fillColorsArray(colorsArray));\n      dispatch(setCurrentBirdArray(currentArray));\n      dispatch(setRandomValue(randomValue));\n    }\n  }, [initialBirdsArray]);\n\n  return (\n    <div className=\"App\">\n      {currentUser ? (\n        <div>\n          <Header />\n\n          {level > maxLevel ? (\n            <EndGame />\n          ) : (\n            <div>\n              <Question />\n              <Main />\n              <CustomButton />\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          <Login />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\n\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport birdsActionTypes from \"./birds.types\";\n\nimport { fetchInfoFail, fetchInfoSuccess } from \"./birds.action\";\n\nexport function* birdsSagas() {\n  yield all([call(onFetchInfoStart)]);\n}\n\nexport function* onFetchInfoStart() {\n  yield takeLatest(birdsActionTypes.FETCH_INFO_START, fetchingInfo);\n}\n\nexport function* fetchingInfo() {\n  try {\n    const response = yield axios.get(\n      \"https://bird-quiz-server.herokuapp.com/getdata\"\n    );\n    yield put(fetchInfoSuccess(response.data));\n  } catch (error) {\n    yield put(fetchInfoFail(error));\n  }\n}\n","import axios from \"axios\";\n\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport userActionTypes from \"./user.types\";\n\nimport {\n  signUpFail,\n  signUpSuccess,\n  loginFail,\n  loginSuccess,\n  updateLevelFail,\n  updateLevelSuccess,\n  getLevelFail,\n  getLevelSuccess,\n  resetLevelSuccess,\n  resetLevelFail,\n  updateScoreFail,\n  updateScoreSuccess,\n  getScoreFail,\n  getScoreSuccess,\n  resetScoreFail,\n  resetScoreSuccess,\n} from \"./user.actions\";\n\nexport function* userSaga() {\n  yield all([\n    call(onSignUpStart),\n    call(onLoginStart),\n    call(onUpdateLevelStart),\n    call(onGetLevelStart),\n    call(onResetLevelStart),\n    call(onUpdateScoreStart),\n    call(onGetScoreStart),\n    call(onResetScoreStart),\n  ]);\n}\n\nexport function* onResetScoreStart() {\n  yield takeLatest(userActionTypes.RESET_SCORE_START, resetScoreStart);\n}\n\nexport function* resetScoreStart({ payload }) {\n  const email = payload;\n  try {\n    const score = yield fetch(\n      \"https://bird-quiz-server.herokuapp.com/resetScore\",\n      {\n        method: \"POST\",\n        credentials: \"include\",\n        body: JSON.stringify({ email }),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    const currentScore = yield score.json();\n    yield put(resetScoreSuccess(currentScore));\n  } catch (error) {\n    yield put(resetScoreFail(error));\n  }\n}\n\nexport function* onGetScoreStart() {\n  yield takeLatest(userActionTypes.GET_SCORE_START, getScoreStart);\n}\n\nexport function* getScoreStart({ payload }) {\n  const email = payload;\n  try {\n    const score = yield fetch(\n      \"https://bird-quiz-server.herokuapp.com/getScore\",\n      {\n        method: \"POST\",\n        credentials: \"include\",\n        body: JSON.stringify({ email }),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    const currentScore = yield score.json();\n    yield put(getScoreSuccess(currentScore));\n  } catch (error) {\n    yield put(getScoreFail(error));\n  }\n}\n\nexport function* onUpdateScoreStart() {\n  yield takeLatest(userActionTypes.UPDATE_SCORE_START, updateScoreStart);\n}\n\nexport function* updateScoreStart({ payload }) {\n  const { email, extraScore } = payload;\n  try {\n    const score = yield fetch(\n      \"https://bird-quiz-server.herokuapp.com/updateScore\",\n      {\n        method: \"PATCH\",\n        credentials: \"include\",\n        body: JSON.stringify({ email, extraScore }),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    const currentScore = yield score.json();\n    yield put(updateScoreSuccess(currentScore));\n  } catch (error) {\n    yield put(updateScoreFail(error));\n  }\n}\n\n//------------------------------------------------------------------------------------\nexport function* onResetLevelStart() {\n  yield takeLatest(userActionTypes.RESET_LEVEL_START, resetLevelStart);\n}\n\nexport function* resetLevelStart({ payload }) {\n  const email = payload;\n  try {\n    const level = yield fetch(\n      \"https://bird-quiz-server.herokuapp.com/resetLevel\",\n      {\n        method: \"POST\",\n        credentials: \"include\",\n        body: JSON.stringify({ email }),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    const currentLevel = yield level.json();\n    yield put(resetLevelSuccess(currentLevel));\n  } catch (error) {\n    yield put(resetLevelFail(error));\n  }\n}\n\nexport function* onGetLevelStart() {\n  yield takeLatest(userActionTypes.GET_LEVEL_START, getLevelStart);\n}\n\nexport function* getLevelStart({ payload }) {\n  const email = payload;\n  try {\n    const level = yield fetch(\n      \"https://bird-quiz-server.herokuapp.com/getLevel\",\n      {\n        method: \"POST\",\n        credentials: \"include\",\n        body: JSON.stringify({ email }),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    const currentLevel = yield level.json();\n    yield put(getLevelSuccess(currentLevel));\n  } catch (error) {\n    yield put(getLevelFail(error));\n  }\n}\n\nexport function* onUpdateLevelStart() {\n  yield takeLatest(userActionTypes.UPDATE_LEVEL_START, updateLevelStart);\n}\n\nexport function* updateLevelStart({ payload }) {\n  const { email } = payload;\n  try {\n    const level = yield fetch(\n      \"https://bird-quiz-server.herokuapp.com/updateLevel\",\n      {\n        method: \"PATCH\",\n        credentials: \"include\",\n        body: JSON.stringify({ email }),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n    const currentLevel = yield level.json();\n    console.log(currentLevel);\n    yield put(updateLevelSuccess(currentLevel));\n  } catch (error) {\n    yield put(updateLevelFail(error));\n  }\n}\n\nexport function* onLoginStart() {\n  yield takeLatest(userActionTypes.LOGIN_START, loginStart);\n}\n\nexport function* loginStart({ payload }) {\n  const { email, password } = payload;\n\n  try {\n    const user = yield fetch(\"https://bird-quiz-server.herokuapp.com/login\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({ email, password }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const currentUser = yield user.json();\n\n    if (currentUser.message) {\n      yield put(loginFail(currentUser.message));\n    } else {\n      yield put(loginSuccess(currentUser));\n    }\n    localStorage.setItem(\"user\", JSON.stringify(currentUser));\n  } catch (err) {\n    yield put(loginFail(err));\n  }\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUpStart);\n}\n\nexport function* signUpStart({ payload }) {\n  const { email, password } = payload;\n\n  try {\n    const res = yield fetch(\"https://bird-quiz-server.herokuapp.com/signup\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({ email, password }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const response = yield res.json();\n    console.log(response);\n    if (response.message) {\n      yield put(signUpFail(response.message));\n    } else if (response.success) {\n      yield put(signUpSuccess(response.success));\n    }\n  } catch (err) {\n    yield put(signUpFail(err));\n  }\n}\n","import { all, call } from \"redux-saga/effects\";\nimport { birdsSagas } from \"./birds/birds.sagas\";\nimport { userSaga } from \"./user/user.sagas\";\nexport default function* rootSaga() {\n  yield all([call(birdsSagas), call(userSaga)]);\n}\n","import birdsActionTypes from \"./birds.types\";\n\nconst INITIAL_STATE = {\n  extraScore: 5,\n  random: null,\n  answered: false,\n  birdsArray: null,\n  currentBirdsArray: null,\n  activeBird: null,\n  questionBird: null,\n  error: null,\n  colorsArray: [],\n};\n\nconst birdReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case birdsActionTypes.FETCH_INFO_SUCCESS:\n      return {\n        ...state,\n        birdsArray: action.payload,\n      };\n    case birdsActionTypes.FETCH_INFO_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case birdsActionTypes.SET_CURRENT_BIRD_ARRAY:\n      return {\n        ...state,\n        currentBirdsArray: action.payload,\n      };\n    case birdsActionTypes.SET_RANDOM_VALUE:\n      return {\n        ...state,\n        random: action.payload,\n      };\n    case birdsActionTypes.SET_ACTIVE_BIRD:\n      return {\n        ...state,\n        activeBird: action.payload,\n      };\n    case birdsActionTypes.SET_QUESTION_BIRD:\n      return {\n        ...state,\n        questionBird: action.payload,\n      };\n    case birdsActionTypes.SET_ANSWERED:\n      return {\n        ...state,\n        answered: !state.answered,\n      };\n    case birdsActionTypes.INCREASE_SCORE:\n      return {\n        ...state,\n        score: state.score + action.payload,\n      };\n    case birdsActionTypes.DECREASE_EXPTRA_SCORE:\n      return {\n        ...state,\n        extraScore:\n          state.extraScore >= 0 ? state.extraScore - 1 : state.extraScore,\n      };\n    case birdsActionTypes.RESET_EXTRA_SCORE:\n      return {\n        ...state,\n        extraScore: 5,\n      };\n    case birdsActionTypes.RESET_ACTIVE_BIRD:\n      return {\n        ...state,\n        activeBird: null,\n      };\n    case birdsActionTypes.FILL_COLORS_ARRAY:\n      return {\n        ...state,\n        colorsArray: action.payload,\n      };\n    case birdsActionTypes.CHANGE_LIST_COLOR:\n      return {\n        ...state,\n        colorsArray: state.colorsArray.map((color, index) =>\n          index === action.payload.index\n            ? (color = action.payload.color)\n            : color\n        ),\n      };\n    case birdsActionTypes.RESET_GAME:\n      return {\n        ...state,\n        extraScore: 5,\n        score: 0,\n        answered: false,\n        activeBird: null,\n        questionBird: null,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport default birdReducer;\n","import userActionTypes from \"./user.types\";\n\nconst INITIAL_STATE = {\n  currentUser: null,\n  level: 1,\n  message: null,\n  score: 0,\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case userActionTypes.SIGN_UP_SUCCESS:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.SIGN_UP_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        currentUser: action.payload,\n      };\n    case userActionTypes.LOGIN_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.UPDATE_LEVEL_SUCCESS:\n      return {\n        ...state,\n        level: action.payload,\n      };\n    case userActionTypes.UPDATE_LEVEL_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.GET_LEVEL_SUCCESS:\n      return {\n        ...state,\n        level: action.payload,\n      };\n    case userActionTypes.GET_LEVEL_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.SET_MESSAGE:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.RESET_LEVEL_SUCCESS:\n      return {\n        ...state,\n        level: action.payload,\n      };\n    case userActionTypes.RESET_LEVEL_FAIL:\n      return {\n        ...state,\n        messgae: action.payload,\n      };\n    case userActionTypes.UPDATE_SCORE_SUCCESS:\n      return {\n        ...state,\n        score: action.payload,\n      };\n    case userActionTypes.UPDATE_SCORE_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.GET_SCORE_SUCCESS:\n      return {\n        ...state,\n        score: action.payload,\n      };\n    case userActionTypes.GET_SCORE_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.RESET_SCORE_SUCCESS:\n      return {\n        ...state,\n        score: action.payload,\n      };\n    case userActionTypes.RESET_SCORE_FAIL:\n      return {\n        ...state,\n        messgae: action.payload,\n      };\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from \"redux\";\n\nimport birdReducer from \"./birds/birds.reducer\";\nimport userReducer from \"./user/user.reducer\";\n\nconst rootReducer = combineReducers({\n  birds: birdReducer,\n  user: userReducer,\n});\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./root-saga\";\nimport rootReducer from \"./root-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}