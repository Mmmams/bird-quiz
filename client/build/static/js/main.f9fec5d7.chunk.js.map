{"version":3,"sources":["redux/user/user.types.js","redux/user/user.actions.js","redux/birds/birds.selector.js","redux/user/user.selector.js","components/header/header.component.jsx","assets/true.mp3","assets/wrong.mp3","redux/birds/birds.types.js","redux/birds/birds.action.js","components/list/list.component.jsx","components/information/information.component.jsx","components/main/main.component.jsx","components/qustion/question.component.jsx","utils.js","components/custom-button/custom-button.component.jsx","components/endgame/endgame.component.jsx","components/login/login.jsx","App.jsx","reportWebVitals.js","redux/birds/birds.sagas.js","redux/user/user.sagas.js","redux/root-saga.js","redux/birds/birds.reducer.js","redux/user/user.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["userActionTypes","SIGN_UP_START","SIGN_UP_SUCCESS","SIGN_UP_FAIL","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","UPDATE_LEVEL_START","UPDATE_LEVEL_SUCCESS","UPDATE_LEVEL_FAIL","GET_LEVEL_START","GET_LEVEL_SUCCESS","GET_LEVEL_FAIL","RESET_LEVEL_START","RESET_LEVEL_SUCCESS","RESET_LEVEL_FAIL","SET_MESSAGE","signUpFail","error","type","payload","loginStart","email","password","loginSuccess","user","loginFail","updateLevelSuccess","level","getLevelStart","getLevelSuccess","resetLevelSuccess","setMessage","message","selectBirds","state","birds","selectBirdsArray","createSelector","birdsArray","selectCurrentBirdsArray","currentBirdsArray","selectScore","score","selectExtraScore","extraScore","selectRandom","random","selectAnswered","answered","selectActiveBird","activeBird","selectQuestionBird","questionBird","selectColorsArray","colorsArray","selectUser","selectCurrentUser","currentUser","selectMessage","selectLevel","useStyles","makeStyles","theme","root","margin","spacing","btn","color","Header","classes","dispatch","useDispatch","useSelector","className","Button","variant","onClick","localStorage","removeItem","birdsActionTypes","FETCH_INFO_START","FETCH_INFO_SUCCESS","FETCH_INFO_FAIL","SET_CURRENT_BIRD_ARRAY","SET_RANDOM_VALUE","SET_ACTIVE_BIRD","SET_QUESTION_BIRD","SET_ANSWERED","INCREASE_SCORE","DECREASE_EXPTRA_SCORE","RESET_EXTRA_SCORE","RESET_ACTIVE_BIRD","RESET_GAME","FILL_COLORS_ARRAY","CHANGE_LIST_COLOR","setCurrentBirdArray","currentBirdArray","setRandomValue","randomValue","setAnswered","fillColorsArray","changeListColor","index","BirdsList","rightAnswerAudio","Audio","right","wrongAnswerAudio","wrong","currentArray","handleChooseList","event","bird","play","map","width","height","cx","cy","r","stroke","strokeWidth","fill","name","_id","BirdInfo","alt","src","image","species","description","controls","audio","Main","Question","currentAudio","useRef","current","pause","useEffect","ref","getRandomValue","max","Math","floor","initialArray","slice","fillColorsArrayFucntion","i","length","push","CustomButton","handleButton","setItem","JSON","stringify","EndGame","handleEndGame","paper","marginTop","display","flexDirection","alignItems","avatar","backgroundColor","form","submit","createMuiTheme","palette","primary","main","secondary","Login","useState","setForm","handleChanges","preventDefault","target","value","handleSignUp","a","handleLogin","test","ThemeProvider","Container","component","maxWidth","CssBaseline","Avatar","Typography","noValidate","TextField","required","fullWidth","id","label","autoComplete","autoFocus","onChange","Alert","severity","Grid","container","justify","item","App","initialBirdsArray","parse","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","birdsSagas","onFetchInfoStart","fetchingInfo","all","call","takeLatest","axios","get","response","put","birdInfo","data","userSaga","onResetLevelStart","resetLevelStart","onGetLevelStart","onUpdateLevelStart","updateLevelStart","onLoginStart","onSignUpStart","signUpStart","console","log","fetch","method","credentials","body","headers","json","currentLevel","res","success","rootSaga","INITIAL_STATE","birdReducer","action","userReducer","messgae","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9fec5d7.chunk.js","sourcesContent":["const userActionTypes = {\n  SIGN_UP_START: \"SIGN_UP_START\",\n  SIGN_UP_SUCCESS: \"SIGN_UP_SUCCESS\",\n  SIGN_UP_FAIL: \"SIGN_UP_FAIL\",\n  LOGIN_START: \"LOGIN_START\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  LOGIN_FAIL: \"LOGIN_FAIL\",\n  LOGOUT: \"LOGOUT\",\n  UPDATE_LEVEL_START: \"UPDATE_LEVEL_START\",\n  UPDATE_LEVEL_SUCCESS: \"UPDATE_LEVEL_SUCCESS\",\n  UPDATE_LEVEL_FAIL: \"UPDATE_LEVEL_FAIL\",\n  GET_LEVEL_START: \"GET_LEVEL_START\",\n  GET_LEVEL_SUCCESS: \"GET_LEVEL_SUCCESS\",\n  GET_LEVEL_FAIL: \"GET_LEVEL_FAIL\",\n  RESET_LEVEL_START: \"RESET_LEVEL_START\",\n  RESET_LEVEL_SUCCESS: \"RESET_LEVEL_SUCCESS\",\n  RESET_LEVEL_FAIL: \"RESET_LEVEL_FAIL\",\n  SET_MESSAGE: \"SET_MESSAGE\",\n};\n\nexport default userActionTypes;\n","import userActionTypes from \"./user.types\";\n\nexport const signUpSuccess = (user) => ({\n  type: userActionTypes.SIGN_UP_SUCCESS,\n  payload: user,\n});\n\nexport const signUpFail = (error) => ({\n  type: userActionTypes.SIGN_UP_FAIL,\n  payload: error,\n});\n\nexport const signUpStart = (email, password) => ({\n  type: userActionTypes.SIGN_UP_START,\n  payload: { email, password },\n});\n\nexport const loginStart = (email, password) => ({\n  type: userActionTypes.LOGIN_START,\n  payload: { email, password },\n});\n\nexport const loginSuccess = (user) => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user,\n});\n\nexport const loginFail = (error) => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: error,\n});\n\nexport const updateLevelStart = (email) => ({\n  type: userActionTypes.UPDATE_LEVEL_START,\n  payload: email,\n});\n\nexport const updateLevelSuccess = (level) => ({\n  type: userActionTypes.UPDATE_LEVEL_SUCCESS,\n  payload: level,\n});\n\nexport const updateLevelFail = (error) => ({\n  type: userActionTypes.UPDATE_LEVEL_FAIL,\n  payload: error,\n});\n\nexport const getLevelStart = (email) => ({\n  type: userActionTypes.GET_LEVEL_START,\n  payload: email,\n});\n\nexport const getLevelSuccess = (level) => ({\n  type: userActionTypes.GET_LEVEL_SUCCESS,\n  payload: level,\n});\n\nexport const getLevelFail = (error) => ({\n  type: userActionTypes.GET_LEVEL_FAIL,\n  payload: error,\n});\n\nexport const resetLevelStart = (email) => ({\n  type: userActionTypes.RESET_LEVEL_START,\n  payload: email,\n});\n\nexport const resetLevelSuccess = (level) => ({\n  type: userActionTypes.RESET_LEVEL_SUCCESS,\n  payload: level,\n});\n\nexport const resetLevelFail = (error) => ({\n  type: userActionTypes.RESET_LEVEL_FAIL,\n  payload: error,\n});\n\nexport const setMessage = (message) => ({\n  type: userActionTypes.SET_MESSAGE,\n  payload: message,\n});\n","import { createSelector } from \"reselect\";\n\nconst selectBirds = (state) => state.birds;\n\nexport const selectBirdsArray = createSelector(\n  [selectBirds],\n  (birds) => birds.birdsArray\n);\n\nexport const selectCurrentBirdsArray = createSelector(\n  [selectBirds],\n  (birds) => birds.currentBirdsArray\n);\n\nexport const selectScore = createSelector(\n  [selectBirds],\n  (birds) => birds.score\n);\n\nexport const selectExtraScore = createSelector(\n  [selectBirds],\n  (birds) => birds.extraScore\n);\n\nexport const selectRandom = createSelector(\n  [selectBirds],\n  (birds) => birds.random\n);\n\nexport const selectAnswered = createSelector(\n  [selectBirds],\n  (birds) => birds.answered\n);\n\nexport const selectActiveBird = createSelector(\n  [selectBirds],\n  (birds) => birds.activeBird\n);\n\nexport const selectQuestionBird = createSelector(\n  [selectBirds],\n  (birds) => birds.questionBird\n);\n\nexport const selectColorsArray = createSelector(\n  [selectBirds],\n  (birds) => birds.colorsArray\n);\n","import { createSelector } from \"reselect\";\n\nconst selectUser = (state) => state.user;\n\nexport const selectCurrentUser = createSelector(\n  [selectUser],\n  (user) => user.currentUser\n);\n\nexport const selectMessage = createSelector(\n  [selectUser],\n  (user) => user.message\n);\n\nexport const selectLevel = createSelector([selectUser], (user) => user.level);\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nimport \"./header.styles.scss\";\n\nimport { loginSuccess } from \"../../redux/user/user.actions\";\n\nimport { selectScore } from \"../../redux/birds/birds.selector\";\nimport { selectCurrentUser, selectLevel } from \"../../redux/user/user.selector\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  btn: {\n    margin: \"10px\",\n    color: \"white\",\n  },\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const user = useSelector(selectCurrentUser);\n  const level = useSelector(selectLevel);\n  const score = useSelector(selectScore);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"user\");\n    dispatch(loginSuccess(null));\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"header-info\">\n        <div className=\"header-logo\">\n          Song<span className=\"logo-part\">Bird</span>\n        </div>\n        <div className=\"header-userinfo\">\n          <div className=\"score\">\n            {user.email}: {score}\n          </div>\n          <Button\n            variant=\"outlined\"\n            className={classes.btn}\n            onClick={handleLogout}\n          >\n            Выйти\n          </Button>\n        </div>\n      </div>\n      <ul className=\"header-list\">\n        <li className={`${level === 1 ? \"currentLevel\" : \"\"}  list`}>\n          Разминка\n        </li>\n        <li className={`${level === 2 ? \"currentLevel\" : \"\"}  list`}>\n          Воробьиные\n        </li>\n        <li className={`${level === 3 ? \"currentLevel\" : \"\"}  list`}>\n          Лесные птицы\n        </li>\n        <li className={`${level === 4 ? \"currentLevel\" : \"\"}  list`}>\n          Певчие птицы\n        </li>\n        <li className={`${level === 5 ? \"currentLevel\" : \"\"}  list`}>\n          Хищные птицы\n        </li>\n        <li className={`${level === 6 ? \"currentLevel\" : \"\"}  list`}>\n          Морские птицы\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/true.878a455e.mp3\";","export default __webpack_public_path__ + \"static/media/wrong.31792b99.mp3\";","const birdsActionTypes = {\n  FETCH_INFO_START: \"FETCH_INFO_START\",\n  FETCH_INFO_SUCCESS: \"FETCH_INFO_SUCCESS\",\n  FETCH_INFO_FAIL: \"FETCH_INFO_FAIL\",\n  SET_CURRENT_BIRD_ARRAY: \"SET_CURRENT_BIRD_ARRAY\",\n  SET_RANDOM_VALUE: \"SET_RANDOM_VALUE\",\n  SET_ACTIVE_BIRD: \"SET_ACTIVE_BIRD\",\n  SET_QUESTION_BIRD: \"SET_QUESTION_BIRD\",\n  SET_ANSWERED: \"SET_ANSWERED\",\n  INCREASE_SCORE: \"INCREASE_SCORE\",\n  DECREASE_EXPTRA_SCORE: \"DECREASE_EXPTRA_SCORE\",\n  RESET_EXTRA_SCORE: \"RESET_EXTRA_SCORE\",\n  RESET_ACTIVE_BIRD: \"RESET_ACTIVE_BIRD\",\n  RESET_GAME: \"RESET_GAME\",\n  FILL_COLORS_ARRAY: \"FILL_COLORS_ARRAY\",\n  CHANGE_LIST_COLOR: \"CHANGE_LIST_COLOR\",\n};\n\nexport default birdsActionTypes;\n","import birdsActionTypes from \"./birds.types\";\n\nexport const fetchInfoStart = () => ({\n  type: birdsActionTypes.FETCH_INFO_START,\n});\n\nexport const fetchInfoSuccess = (birdInfo) => ({\n  type: birdsActionTypes.FETCH_INFO_SUCCESS,\n  payload: birdInfo,\n});\n\nexport const fetchInfoFail = (error) => ({\n  type: birdsActionTypes.FETCH_INFO_FAIL,\n  payload: error,\n});\n\nexport const setCurrentBirdArray = (currentBirdArray) => ({\n  type: birdsActionTypes.SET_CURRENT_BIRD_ARRAY,\n  payload: currentBirdArray,\n});\n\nexport const setRandomValue = (randomValue) => ({\n  type: birdsActionTypes.SET_RANDOM_VALUE,\n  payload: randomValue,\n});\n\nexport const setActiveBird = (bird) => ({\n  type: birdsActionTypes.SET_ACTIVE_BIRD,\n  payload: bird,\n});\n\nexport const setQuestionBird = (bird) => ({\n  type: birdsActionTypes.SET_QUESTION_BIRD,\n  payload: bird,\n});\n\nexport const setAnswered = () => ({\n  type: birdsActionTypes.SET_ANSWERED,\n});\n\nexport const increaseScore = (exptaScore) => ({\n  type: birdsActionTypes.INCREASE_SCORE,\n  payload: exptaScore,\n});\n\nexport const decreaseExtraScore = () => ({\n  type: birdsActionTypes.DECREASE_EXPTRA_SCORE,\n});\n\nexport const resetExtraScore = () => ({\n  type: birdsActionTypes.RESET_EXTRA_SCORE,\n});\n\nexport const resetActiveBird = () => ({\n  type: birdsActionTypes.RESET_ACTIVE_BIRD,\n});\n\nexport const resetGame = () => ({\n  type: birdsActionTypes.RESET_GAME,\n});\n\nexport const fillColorsArray = (colorsArray) => ({\n  type: birdsActionTypes.FILL_COLORS_ARRAY,\n  payload: colorsArray,\n});\n\nexport const changeListColor = (color, index) => ({\n  type: birdsActionTypes.CHANGE_LIST_COLOR,\n  payload: { color, index },\n});\n","import \"./list.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport right from \"../../assets/true.mp3\";\nimport wrong from \"../../assets/wrong.mp3\";\n\nimport {\n  setActiveBird,\n  setAnswered,\n  decreaseExtraScore,\n  increaseScore,\n  changeListColor,\n} from \"../../redux/birds/birds.action\";\n\nimport {\n  selectCurrentBirdsArray,\n  selectAnswered,\n  selectRandom,\n  selectExtraScore,\n  selectColorsArray,\n} from \"../../redux/birds/birds.selector\";\n\nconst BirdsList = () => {\n  const dispatch = useDispatch();\n\n  const rightAnswerAudio = new Audio(right);\n  const wrongAnswerAudio = new Audio(wrong);\n\n  const colorsArray = useSelector(selectColorsArray);\n  const random = useSelector(selectRandom);\n  const answered = useSelector(selectAnswered);\n  const currentArray = useSelector(selectCurrentBirdsArray);\n  const extraScore = useSelector(selectExtraScore);\n\n  const handleChooseList = (event, index) => {\n    dispatch(setActiveBird(currentArray[index]));\n    if (index === random) {\n      if (answered === false) {\n        rightAnswerAudio.play();\n        dispatch(changeListColor(\"green\", index));\n        dispatch(increaseScore(extraScore));\n        dispatch(setAnswered());\n      }\n    } else {\n      if (answered === false && colorsArray[index] !== \"red\") {\n        wrongAnswerAudio.play();\n        dispatch(decreaseExtraScore());\n        dispatch(changeListColor(\"red\", index));\n      }\n    }\n  };\n\n  return (\n    <div className=\"bird-list-container\">\n      {currentArray ? (\n        <div>\n          <ul className=\"bird-list\">\n            {currentArray.map((bird, index) => (\n              <li\n                className=\"list\"\n                key={bird._id}\n                onClick={(event) => handleChooseList(event, index)}\n              >\n                <svg className=\"options_block\" width=\"14\" height=\"14\">\n                  <circle\n                    cx=\"7\"\n                    cy=\"7\"\n                    r=\"6\"\n                    stroke=\"black\"\n                    strokeWidth=\"1\"\n                    fill={colorsArray[index]}\n                  ></circle>\n                </svg>\n                <span>{bird.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div className=\"bird-list-container loading-title\">Загрузка...</div>\n      )}\n    </div>\n  );\n};\n\nexport default BirdsList;\n","import \"./information.styles.scss\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { selectActiveBird } from \"../../redux/birds/birds.selector\";\n\nconst BirdInfo = () => {\n  const activeBird = useSelector(selectActiveBird);\n\n  return (\n    <div className=\"container\">\n      {activeBird ? (\n        <div>\n          <div className=\"bird-info\">\n            <img className=\"bird-img\" alt=\"bird\" src={activeBird.image} />\n\n            <div className=\"title-container\">\n              <div className=\"title\">{activeBird.name}</div>\n              <div className=\"engName\">{activeBird.species}</div>\n              <div className=\"sub-title\">{activeBird.description}</div>\n            </div>\n          </div>\n          <audio controls className=\"bird-audio\" src={activeBird.audio}></audio>\n        </div>\n      ) : (\n        <div className=\"bird-info\">\n          Послушайте звук и выберите правильный ответ.\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BirdInfo;\n","import React from \"react\";\n\nimport \"./main.styles.scss\";\n\nimport BirdList from \"../list/list.component\";\nimport BirdInfo from \"../information/information.component\";\n\nconst Main = () => {\n  return (\n    <div className=\"main\">\n      <BirdList />\n      <BirdInfo />\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./qustion.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { setQuestionBird } from \"../../redux/birds/birds.action\";\n\nimport {\n  selectRandom,\n  selectQuestionBird,\n  selectAnswered,\n  selectCurrentBirdsArray,\n} from \"../../redux/birds/birds.selector\";\n\nconst Question = () => {\n  const dispatch = useDispatch();\n\n  const currentArray = useSelector(selectCurrentBirdsArray);\n  const random = useSelector(selectRandom);\n  const questionBird = useSelector(selectQuestionBird);\n  const answered = useSelector(selectAnswered);\n\n  const currentAudio = useRef(null);\n  if (answered === true) {\n    currentAudio.current.pause();\n  }\n\n  useEffect(() => {\n    if (currentArray) {\n      dispatch(setQuestionBird(currentArray[random]));\n    }\n  }, [random]);\n\n  return (\n    <div className=\"question\">\n      <div>\n        <img\n          className=\"question-image\"\n          alt=\"unknown-bird\"\n          src={\n            answered\n              ? questionBird.image\n              : \"https://image.freepik.com/free-vector/pixel-art-cartoon-bird-icon-set-8bit-autumn_41992-931.jpg\"\n          }\n        />\n      </div>\n      <div className=\"question-data\">\n        <div className=\"name\">{answered ? questionBird.name : \"******\"}</div>\n        {questionBird ? (\n          <audio\n            className=\"question-audio\"\n            controls\n            src={questionBird.audio}\n            ref={currentAudio}\n          ></audio>\n        ) : (\n          <div className=\"loading\">Загрузка...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Question;\n","export const getRandomValue = (max) => {\n  return Math.floor(Math.random() * max);\n};\n\nexport const currentBirdsArray = (level, initialArray) => {\n  const currentArray = initialArray.slice((level - 1) * 6, level * 6);\n  return currentArray;\n};\n\nexport const audioClick = (answer) => {\n  const rightAnswer = new Audio(\"./assets/true.mp3\");\n  const wrongAnswer = new Audio(\"./assets/wrong.mp3\");\n  if (answer) {\n    rightAnswer.play();\n  } else {\n    wrongAnswer.play();\n  }\n};\n\nexport const fillColorsArrayFucntion = (birdsArray) => {\n  const colorsArray = [];\n  for (let i = 0; i < birdsArray.length; i++) {\n    colorsArray.push(\"white\");\n  }\n  return colorsArray;\n};\n","import React from \"react\";\n\nimport \"./custom-button.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  currentBirdsArray,\n  getRandomValue,\n  fillColorsArrayFucntion,\n} from \"../../utils\";\n\nimport { selectCurrentUser, selectLevel } from \"../../redux/user/user.selector\";\n\nimport { updateLevelStart, setMessage } from \"../../redux/user/user.actions\";\n\nimport {\n  setAnswered,\n  setCurrentBirdArray,\n  resetActiveBird,\n  setRandomValue,\n  fillColorsArray,\n  resetExtraScore,\n} from \"../../redux/birds/birds.action\";\n\nimport {\n  selectAnswered,\n  selectBirdsArray,\n} from \"../../redux/birds/birds.selector\";\n\nconst CustomButton = () => {\n  const dispatch = useDispatch();\n\n  const user = useSelector(selectCurrentUser);\n  const answered = useSelector(selectAnswered);\n  const level = useSelector(selectLevel);\n  const initialArray = useSelector(selectBirdsArray);\n\n  const handleButton = () => {\n    if (answered === true) {\n      dispatch(setAnswered());\n      dispatch(resetActiveBird());\n      dispatch(resetExtraScore());\n      dispatch(updateLevelStart({ email: user.email }));\n      const currentArray = currentBirdsArray(level + 1, initialArray);\n      dispatch(setCurrentBirdArray(currentArray));\n      const randomValue = getRandomValue(currentArray.length);\n      dispatch(setRandomValue(randomValue));\n      const colorsArray = fillColorsArrayFucntion(currentArray);\n      dispatch(fillColorsArray(colorsArray));\n      dispatch(setMessage(null));\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n  };\n\n  return (\n    <div>\n      <button\n        className={answered ? \"custom-button\" : \"blockedBtn\"}\n        onClick={() => {\n          handleButton();\n        }}\n      >\n        Следующий уровень\n      </button>\n    </div>\n  );\n};\n\nexport default CustomButton;\n","import React from \"react\";\n\nimport \"./endgame.styles.scss\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getRandomValue,\n  currentBirdsArray,\n  fillColorsArrayFucntion,\n} from \"../../utils\";\n\nimport { selectCurrentUser } from \"../../redux/user/user.selector\";\n\nimport { resetLevelStart } from \"../../redux/user/user.actions.js\";\n\nimport {\n  resetGame,\n  setRandomValue,\n  setCurrentBirdArray,\n  fillColorsArray,\n} from \"../../redux/birds/birds.action\";\n\nimport {\n  selectScore,\n  selectBirdsArray,\n} from \"../../redux/birds/birds.selector\";\n\nconst EndGame = () => {\n  const dispatch = useDispatch();\n\n  const score = useSelector(selectScore);\n  const user = useSelector(selectCurrentUser);\n  const initialArray = useSelector(selectBirdsArray);\n  const maxScore = 30;\n\n  const handleEndGame = () => {\n    dispatch(resetGame());\n    const currentArray = currentBirdsArray(1, initialArray);\n    dispatch(setCurrentBirdArray(currentArray));\n\n    const colorsArray = fillColorsArrayFucntion(currentArray);\n    dispatch(fillColorsArray(colorsArray));\n\n    const randomValue = getRandomValue(currentArray.length);\n    dispatch(setRandomValue(randomValue));\n\n    dispatch(resetLevelStart(user.email));\n  };\n\n  return (\n    <div className=\"endgame-container\">\n      <div className=\"endgame-title\">Поздравляем</div>\n      <div className=\"endgame-subtitle\">\n        Игра окончена. Общий результат {score} из 30 возможных баллов.\n      </div>\n      {score === maxScore ? (\n        <div className=\"endgame-subtitle\">Поздравляем, Вы прошли игру.</div>\n      ) : (\n        <button className=\"endgame-btn\" onClick={() => handleEndGame()}>\n          Попробовать еще раз!\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default EndGame;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  signUpStart,\n  loginStart,\n  getLevelStart,\n  setMessage,\n} from \"../../redux/user/user.actions\";\n\nimport {\n  selectMessage,\n  selectCurrentUser,\n} from \"../../redux/user/user.selector\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, createMuiTheme } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: \"#64b5f6\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#64b5f6\",\n    },\n    secondary: {\n      main: \"#008cff\",\n    },\n  },\n});\n\nexport default function Login() {\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  const message = useSelector(selectMessage);\n  const user = useSelector(selectCurrentUser);\n  const [form, setForm] = useState({ email: \"\", password: \"\" });\n\n  const handleChanges = (event) => {\n    event.preventDefault();\n    setForm({ ...form, [event.target.name]: event.target.value });\n  };\n\n  const handleSignUp = async (event) => {\n    event.preventDefault();\n    dispatch(signUpStart(form.email, form.password));\n    dispatch(setMessage(null));\n  };\n\n  const validateEmail = (email) => {\n    if (\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n        email\n      )\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleLogin = async (event) => {\n    event.preventDefault();\n    const validate = validateEmail(form.email);\n    if (validate) {\n      dispatch(loginStart(form.email, form.password));\n      dispatch(getLevelStart(form.email));\n      dispatch(setMessage(null));\n    } else {\n      dispatch(setMessage(\"Неккоректный email!\"));\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              onChange={handleChanges}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={handleChanges}\n            />\n            {message ? (\n              message === \"Пользователь успешно создан!\" ? (\n                <Alert severity=\"success\">{message}</Alert>\n              ) : (\n                <Alert severity=\"error\">{message}</Alert>\n              )\n            ) : null}\n\n            <Grid container justify={\"space-between\"}>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  className={classes.submit}\n                  onClick={handleLogin}\n                >\n                  Войти\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  className={classes.submit}\n                  onClick={handleSignUp}\n                >\n                  Зарегестрироваться\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n    </ThemeProvider>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./App.css\";\n\nimport Header from \"./components/header/header.component\";\nimport Main from \"./components/main/main.component\";\nimport Question from \"./components/qustion/question.component\";\nimport CustomButton from \"./components/custom-button/custom-button.component\";\nimport EndGame from \"./components/endgame/endgame.component\";\nimport Login from \"./components/login/login\";\n\nimport {\n  currentBirdsArray,\n  getRandomValue,\n  fillColorsArrayFucntion,\n} from \"./utils.js\";\n\nimport { loginSuccess, getLevelStart } from \"./redux/user/user.actions\";\n\nimport { selectCurrentUser, selectLevel } from \"./redux/user/user.selector\";\n\nimport {\n  fetchInfoStart,\n  setCurrentBirdArray,\n  setRandomValue,\n  fillColorsArray,\n} from \"./redux/birds/birds.action\";\n\nimport { selectBirdsArray } from \"./redux/birds/birds.selector\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const maxLevel = 6;\n  const currentUser = useSelector(selectCurrentUser);\n  const level = useSelector(selectLevel);\n  const initialBirdsArray = useSelector(selectBirdsArray);\n\n  useEffect(() => {\n    dispatch(fetchInfoStart());\n  }, []);\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    dispatch(loginSuccess(user));\n  }, []);\n  useEffect(() => {\n    if (currentUser) {\n      dispatch(getLevelStart(currentUser.email));\n    }\n  }, [currentUser]);\n\n  useEffect(() => {\n    if (initialBirdsArray) {\n      const currentArray = currentBirdsArray(level, initialBirdsArray);\n      const randomValue = getRandomValue(currentArray.length);\n      const colorsArray = fillColorsArrayFucntion(currentArray);\n      dispatch(fillColorsArray(colorsArray));\n      dispatch(setCurrentBirdArray(currentArray));\n      dispatch(setRandomValue(randomValue));\n    }\n  }, [initialBirdsArray]);\n\n  return (\n    <div className=\"App\">\n      {currentUser ? (\n        <div>\n          <Header />\n\n          {level > maxLevel ? (\n            <EndGame />\n          ) : (\n            <div>\n              <Question />\n              <Main />\n              <CustomButton />\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          <Login />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\n\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport birdsActionTypes from \"./birds.types\";\n\nimport { fetchInfoFail, fetchInfoSuccess } from \"./birds.action\";\n\nexport function* birdsSagas() {\n  yield all([call(onFetchInfoStart)]);\n}\n\nexport function* onFetchInfoStart() {\n  yield takeLatest(birdsActionTypes.FETCH_INFO_START, fetchingInfo);\n}\n\nexport function* fetchingInfo() {\n  try {\n    const response = yield axios.get(\"http://localhost:5000/getdata\");\n    yield put(fetchInfoSuccess(response.data));\n  } catch (error) {\n    yield put(fetchInfoFail(error));\n  }\n}\n","import axios from \"axios\";\n\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport userActionTypes from \"./user.types\";\n\nimport {\n  signUpFail,\n  signUpSuccess,\n  loginFail,\n  loginSuccess,\n  updateLevelFail,\n  updateLevelSuccess,\n  getLevelFail,\n  getLevelSuccess,\n  resetLevelSuccess,\n  resetLevelFail,\n} from \"./user.actions\";\n\nexport function* userSaga() {\n  yield all([\n    call(onSignUpStart),\n    call(onLoginStart),\n    call(onUpdateLevelStart),\n    call(onGetLevelStart),\n    call(onResetLevelStart),\n  ]);\n}\n\nexport function* onResetLevelStart() {\n  yield takeLatest(userActionTypes.RESET_LEVEL_START, resetLevelStart);\n}\n\nexport function* resetLevelStart({ payload }) {\n  const email = payload;\n  console.log(payload);\n  console.log(email);\n  try {\n    const level = yield fetch(\"http://localhost:5000/resetLevel\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({ email }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const currentLevel = yield level.json();\n    yield put(resetLevelSuccess(currentLevel));\n  } catch (error) {\n    yield put(resetLevelFail(error));\n  }\n}\n\nexport function* onGetLevelStart() {\n  yield takeLatest(userActionTypes.GET_LEVEL_START, getLevelStart);\n}\n\nexport function* getLevelStart({ payload }) {\n  const email = payload;\n  try {\n    const level = yield fetch(\"http://localhost:5000/getLevel\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({ email }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const currentLevel = yield level.json();\n    yield put(getLevelSuccess(currentLevel));\n  } catch (error) {\n    yield put(getLevelFail(error));\n  }\n}\n\nexport function* onUpdateLevelStart() {\n  yield takeLatest(userActionTypes.UPDATE_LEVEL_START, updateLevelStart);\n}\n\nexport function* updateLevelStart({ payload }) {\n  const { email } = payload;\n  try {\n    const level = yield fetch(\"http://localhost:5000/updateLevel\", {\n      method: \"PATCH\",\n      credentials: \"include\",\n      body: JSON.stringify({ email }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const currentLevel = yield level.json();\n    yield put(updateLevelSuccess(currentLevel));\n  } catch (error) {\n    yield put(updateLevelFail(error));\n  }\n}\n\nexport function* onLoginStart() {\n  yield takeLatest(userActionTypes.LOGIN_START, loginStart);\n}\n\nexport function* loginStart({ payload }) {\n  const { email, password } = payload;\n\n  try {\n    const user = yield fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({ email, password }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const currentUser = yield user.json();\n\n    if (currentUser.message) {\n      yield put(loginFail(currentUser.message));\n    } else {\n      yield put(loginSuccess(currentUser));\n    }\n    localStorage.setItem(\"user\", JSON.stringify(currentUser));\n  } catch (err) {\n    yield put(loginFail(err));\n  }\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUpStart);\n}\n\nexport function* signUpStart({ payload }) {\n  const { email, password } = payload;\n\n  try {\n    const res = yield fetch(\"http://localhost:5000/signup\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({ email, password }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const response = yield res.json();\n    console.log(response);\n    if (response.message) {\n      yield put(signUpFail(response.message));\n    } else if (response.success) {\n      yield put(signUpSuccess(response.success));\n    }\n  } catch (err) {\n    yield put(signUpFail(err));\n  }\n}\n","import { all, call } from \"redux-saga/effects\";\nimport { birdsSagas } from \"./birds/birds.sagas\";\nimport { userSaga } from \"./user/user.sagas\";\nexport default function* rootSaga() {\n  yield all([call(birdsSagas), call(userSaga)]);\n}\n","import birdsActionTypes from \"./birds.types\";\n\nconst INITIAL_STATE = {\n  extraScore: 5,\n  random: null,\n  answered: false,\n  score: 0,\n  birdsArray: null,\n  currentBirdsArray: null,\n  activeBird: null,\n  questionBird: null,\n  error: null,\n  colorsArray: [],\n};\n\nconst birdReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case birdsActionTypes.FETCH_INFO_SUCCESS:\n      return {\n        ...state,\n        birdsArray: action.payload,\n      };\n    case birdsActionTypes.FETCH_INFO_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case birdsActionTypes.SET_CURRENT_BIRD_ARRAY:\n      return {\n        ...state,\n        currentBirdsArray: action.payload,\n      };\n    case birdsActionTypes.SET_RANDOM_VALUE:\n      return {\n        ...state,\n        random: action.payload,\n      };\n    case birdsActionTypes.SET_ACTIVE_BIRD:\n      return {\n        ...state,\n        activeBird: action.payload,\n      };\n    case birdsActionTypes.SET_QUESTION_BIRD:\n      return {\n        ...state,\n        questionBird: action.payload,\n      };\n    case birdsActionTypes.SET_ANSWERED:\n      return {\n        ...state,\n        answered: !state.answered,\n      };\n    case birdsActionTypes.INCREASE_SCORE:\n      return {\n        ...state,\n        score: state.score + action.payload,\n      };\n    case birdsActionTypes.DECREASE_EXPTRA_SCORE:\n      return {\n        ...state,\n        extraScore:\n          state.extraScore >= 0 ? state.extraScore - 1 : state.extraScore,\n      };\n    case birdsActionTypes.RESET_EXTRA_SCORE:\n      return {\n        ...state,\n        extraScore: 5,\n      };\n    case birdsActionTypes.RESET_ACTIVE_BIRD:\n      return {\n        ...state,\n        activeBird: null,\n      };\n    case birdsActionTypes.FILL_COLORS_ARRAY:\n      return {\n        ...state,\n        colorsArray: action.payload,\n      };\n    case birdsActionTypes.CHANGE_LIST_COLOR:\n      return {\n        ...state,\n        colorsArray: state.colorsArray.map((color, index) =>\n          index === action.payload.index\n            ? (color = action.payload.color)\n            : color\n        ),\n      };\n    case birdsActionTypes.RESET_GAME:\n      return {\n        ...state,\n        extraScore: 5,\n        score: 0,\n        answered: false,\n        activeBird: null,\n        questionBird: null,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport default birdReducer;\n","import userActionTypes from \"./user.types\";\n\nconst INITIAL_STATE = {\n  currentUser: null,\n  level: 1,\n  message: null,\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case userActionTypes.SIGN_UP_SUCCESS:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.SIGN_UP_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        currentUser: action.payload,\n      };\n    case userActionTypes.LOGIN_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.UPDATE_LEVEL_SUCCESS:\n      return {\n        ...state,\n        level: action.payload,\n      };\n    case userActionTypes.UPDATE_LEVEL_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.GET_LEVEL_SUCCESS:\n      return {\n        ...state,\n        level: action.payload,\n      };\n    case userActionTypes.GET_LEVEL_FAIL:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.SET_MESSAGE:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case userActionTypes.RESET_LEVEL_SUCCESS:\n      return {\n        ...state,\n        level: action.payload,\n      };\n    case userActionTypes.RESET_LEVEL_FAIL:\n      return {\n        ...state,\n        messgae: action.payload,\n      };\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from \"redux\";\n\nimport birdReducer from \"./birds/birds.reducer\";\nimport userReducer from \"./user/user.reducer\";\n\nconst rootReducer = combineReducers({\n  birds: birdReducer,\n  user: userReducer,\n});\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./root-saga\";\nimport rootReducer from \"./root-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}